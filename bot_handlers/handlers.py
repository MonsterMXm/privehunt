from aiogram import Router, Bot, Dispatcher, types, F
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.filters import Command, CommandObject
from aiogram.exceptions import TelegramAPIError
import logging
import json
import numpy as np
from datetime import datetime, timedelta
from config.settings import Config
from database.db_manager import db
from exchanges.exchange_manager import ExchangeManager
from analysis.analyzer import AIAnalyzer
from strategies.auto_strategies import AutoStrategies
from trading.position_manager import PositionManager
from trading.trading_engine import TradingEngine

logger = logging.getLogger(__name__)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–µ—Ä–≤–∏—Å–æ–≤
exchange_manager = ExchangeManager()
trading_engine = TradingEngine(exchange_manager)
analyzer = AIAnalyzer(exchange_manager)
position_manager = PositionManager()
auto_strategies = AutoStrategies(exchange_manager)

router = Router()

# ==================== –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –§–£–ù–ö–¶–ò–ò ====================

async def get_user_status(user_id: int) -> dict:
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    user_data = await db.fetch(
        "SELECT vip_until, auto_trading, free_signals FROM users WHERE user_id = ?",
        (user_id,)
    )
    if not user_data:
        return None
    
    return {
        'is_vip': user_data[0][0] and datetime.now() < datetime.fromisoformat(user_data[0][0]),
        'auto_trading': user_data[0][1],
        'free_signals': user_data[0][2]
    }

def create_main_keyboard() -> InlineKeyboardMarkup:
    """–°–æ–∑–¥–∞–Ω–∏–µ –æ—Å–Ω–æ–≤–Ω–æ–π –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã"""
    keyboard = InlineKeyboardMarkup(row_width=2)
    buttons = [
        InlineKeyboardButton("üí∞ –ö—É–ø–∏—Ç—å VIP", callback_data="buy_vip"),
        InlineKeyboardButton("üìä –õ–∏–¥–µ—Ä–±–æ—Ä–¥", callback_data="leaderboard"),
        InlineKeyboardButton("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏", callback_data="settings"),
        InlineKeyboardButton("üìà –ê–Ω–∞–ª–∏–∑ —Ä—ã–Ω–∫–∞", callback_data="market_analysis"),
        InlineKeyboardButton("üìä –ú–æ–∏ –ø–æ–∑–∏—Ü–∏–∏", callback_data="my_positions"),
        InlineKeyboardButton("ü§ñ –ê–≤—Ç–æ—Ç–æ—Ä–≥–æ–≤–ª—è", callback_data="auto_trading"),
        InlineKeyboardButton("üß† AI –ê–Ω–∞–ª–∏–∑", callback_data="ai_analysis"),
        InlineKeyboardButton("üí≥ –ë–∞–ª–∞–Ω—Å", callback_data="balance"),
        InlineKeyboardButton("üìú –ò—Å—Ç–æ—Ä–∏—è —Å–¥–µ–ª–æ–∫", callback_data="trades"),
        InlineKeyboardButton("üîÑ –û–±–Ω–æ–≤–∏—Ç—å –º–µ–Ω—é", callback_data="refresh_menu")
    ]
    keyboard.add(*buttons)
    return keyboard

# ==================== –ö–û–ú–ê–ù–î–´ –ë–û–¢–ê ====================

@router.message(Command("start"))
async def cmd_start(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    try:
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ —Å–æ–∑–¥–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ë–î
        user_exists = await db.fetch(
            "SELECT 1 FROM users WHERE user_id = ?",
            (message.from_user.id,))
        
        if not user_exists:
            await db.execute(
                "INSERT INTO users (user_id, api_keys, vip_until, free_signals, total_profit, is_admin, risk_level, auto_trading, trading_strategy) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?)",
                (message.from_user.id, '{}', None, Config.FREE_SIGNALS, 0.0, False, 2, False, 'arbitrage'))
        
        # –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        status = await get_user_status(message.from_user.id)
        
        # –û—Ç–ø—Ä–∞–≤–∫–∞ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
        await message.answer(
            f"üöÄ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {message.from_user.full_name}!\n\n"
            f"üîπ –í–∞—à —Å—Ç–∞—Ç—É—Å: {'VIP' if status['is_vip'] else '–û–±—ã—á–Ω—ã–π'}\n"
            f"üîπ –ê–≤—Ç–æ—Ç–æ—Ä–≥–æ–≤–ª—è: {'üü¢ –í–ö–õ' if status['auto_trading'] else 'üî¥ –í–´–ö–õ'}\n"
            f"üîπ –î–æ—Å—Ç—É–ø–Ω–æ —Å–∏–≥–Ω–∞–ª–æ–≤: {status['free_signals']}\n\n"
            "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –±–æ—Ç–æ–º:",
            reply_markup=create_main_keyboard()
        )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ –∫–æ–º–∞–Ω–¥–µ start: {e}")
        await message.answer("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

@router.message(Command("help"))
async def cmd_help(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help"""
    help_text = (
        "üìã –°–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥:\n\n"
        "–û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
        "/start - –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞\n"
        "/help - –°–ø—Ä–∞–≤–∫–∞ –ø–æ –∫–æ–º–∞–Ω–¥–∞–º\n"
        "/menu - –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é\n\n"
        "–¢–æ—Ä–≥–æ–≤—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
        "/ai_scan [–ø–∞—Ä–∞] - AI –∞–Ω–∞–ª–∏–∑ —Ç–æ—Ä–≥–æ–≤–æ–π –ø–∞—Ä—ã\n"
        "/strategy list - –°–ø–∏—Å–æ–∫ —Å—Ç—Ä–∞—Ç–µ–≥–∏–π\n"
        "/strategy activate <—Ç–∏–ø> <–ø–∞—Ä–∞> [–ø–∞—Ä–∞–º–µ—Ç—Ä—ã] - –ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å —Å—Ç—Ä–∞—Ç–µ–≥–∏—é\n"
        "/strategy deactivate <id> - –î–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å —Å—Ç—Ä–∞—Ç–µ–≥–∏—é\n"
        "/positions - –ú–æ–∏ –ø–æ–∑–∏—Ü–∏–∏\n"
        "/close [id] - –ó–∞–∫—Ä—ã—Ç—å –ø–æ–∑–∏—Ü–∏—é\n\n"
        "–ë–∞–ª–∞–Ω—Å –∏ API:\n"
        "/balance - –ë–∞–ª–∞–Ω—Å –Ω–∞ –±–∏—Ä–∂–∞—Ö\n"
        "/add_api <–±–∏—Ä–∂–∞> <key> <secret> - –î–æ–±–∞–≤–∏—Ç—å API –∫–ª—é—á–∏\n\n"
        "–ê–≤—Ç–æ—Ç–æ—Ä–≥–æ–≤–ª—è:\n"
        "/autotrade on - –í–∫–ª—é—á–∏—Ç—å –∞–≤—Ç–æ—Ç–æ—Ä–≥–æ–≤–ª—é\n"
        "/autotrade off - –í—ã–∫–ª—é—á–∏—Ç—å –∞–≤—Ç–æ—Ç–æ—Ä–≥–æ–≤–ª—é\n"
        "/autotrade strategy <–Ω–∞–∑–≤–∞–Ω–∏–µ> - –ò–∑–º–µ–Ω–∏—Ç—å —Å—Ç—Ä–∞—Ç–µ–≥–∏—é\n"
        "/trades - –ò—Å—Ç–æ—Ä–∏—è —Å–¥–µ–ª–æ–∫\n\n"
        "VIP —Ñ—É–Ω–∫—Ü–∏–∏:\n"
        "/vip - –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ VIP —Å—Ç–∞—Ç—É—Å–µ\n"
        "/pay_vip - –û–ø–ª–∞—Ç–∞ VIP –ø–æ–¥–ø–∏—Å–∫–∏"
    )
    await message.answer(help_text)

@router.message(Command("menu"))
async def cmd_menu(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /menu"""
    await cmd_start(message)

@router.message(Command("ai_scan"))
async def cmd_ai_scan(message: types.Message, command: CommandObject):
    """AI –∞–Ω–∞–ª–∏–∑ —Ç–æ—Ä–≥–æ–≤–æ–π –ø–∞—Ä—ã"""
    try:
        if not command.args:
            return await message.answer("‚ÑπÔ∏è –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /ai_scan BTC/USDT")
        
        symbol = command.args.strip().upper()
        
        if symbol not in Config.TRADING_PAIRS:
            return await message.answer(
                f"‚ö†Ô∏è –ü–∞—Ä–∞ {symbol} –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è\n\n"
                f"–î–æ—Å—Ç—É–ø–Ω—ã–µ –ø–∞—Ä—ã:\n{', '.join(Config.TRADING_PAIRS[:10])}\n..."
            )
        
        await message.answer("üîç –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ä—ã–Ω–æ–∫...")
        trend = await analyzer.predict_trend(symbol)
        
        report = (
            f"üß† AI –ê–Ω–∞–ª–∏–∑ –¥–ª—è {symbol}\n\n"
            f"üìä –¢—Ä–µ–Ω–¥: {trend['direction'].upper()}\n"
            f"üìà –£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {trend['confidence']:.0%}\n"
            f"üéØ –¶–µ–ª—å: {trend['price_target']:.2f} USDT\n\n"
            f"üìâ –ü–æ–¥–¥–µ—Ä–∂–∫–∞: {trend['support']:.2f}\n"
            f"üìà –°–æ–ø—Ä–æ—Ç–∏–≤–ª–µ–Ω–∏–µ: {trend['resistance']:.2f}\n\n"
            f"üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–æ: {datetime.now().strftime('%H:%M %d.%m.%Y')}"
        )
        
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üìä –û—Ç–∫—Ä—ã—Ç—å –≥—Ä–∞—Ñ–∏–∫", url=f"https://www.tradingview.com/chart/?symbol={symbol.replace('/', '')}")],
            [InlineKeyboardButton(text="ü§ñ –ê–≤—Ç–æ—Ç–æ—Ä–≥–æ–≤–ª—è", callback_data=f"auto_{symbol}")]
        ])
        
        await message.answer(report, reply_markup=keyboard)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ AI –∞–Ω–∞–ª–∏–∑–∞: {e}")
        await message.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ")

@router.message(Command("strategy"))
async def cmd_strategy(message: types.Message, command: CommandObject):
    """–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ç–æ—Ä–≥–æ–≤—ã–º–∏ —Å—Ç—Ä–∞—Ç–µ–≥–∏—è–º–∏"""
    try:
        if not command.args:
            return await message.answer(
                "üìä –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏—è–º–∏\n\n"
                "–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
                "/strategy list - –°–ø–∏—Å–æ–∫ —Å—Ç—Ä–∞—Ç–µ–≥–∏–π\n"
                "/strategy activate <—Ç–∏–ø> <–ø–∞—Ä–∞> [–ø–∞—Ä–∞–º–µ—Ç—Ä—ã] - –ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å\n"
                "/strategy deactivate <id> - –î–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å\n\n"
                "–ü—Ä–∏–º–µ—Ä—ã:\n"
                "/strategy activate grid BTC/USDT 50000 60000\n"
                "/strategy activate rsi ETH/USDT 30 70"
            )
        
        args = command.args.split()
        subcommand = args[0].lower()
        
        if subcommand == "list":
            strategies = await db.fetch(
                "SELECT strategy_id, strategy_type, symbol, params FROM strategies WHERE user_id = ?",
                (message.from_user.id,))
            
            if not strategies:
                return await message.answer("‚ÑπÔ∏è –£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å—Ç—Ä–∞—Ç–µ–≥–∏–π")
            
            response = "üìä –í–∞—à–∏ –∞–∫—Ç–∏–≤–Ω—ã–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏:\n\n"
            for strat in strategies:
                params = json.loads(strat[3])
                response += (
                    f"üîπ ID: {strat[0]}\n"
                    f"–¢–∏–ø: {strat[1]}\n"
                    f"–ü–∞—Ä–∞: {strat[2]}\n"
                    f"–ü–∞—Ä–∞–º–µ—Ç—Ä—ã: {params}\n\n"
                )
            
            keyboard = InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text=f"‚ùå –£–¥–∞–ª–∏—Ç—å {strat[0]}", callback_data=f"del_strat_{strat[0]}") for strat in strategies]
            ])
            
            await message.answer(response, reply_markup=keyboard)
            
        elif subcommand == "activate":
            if len(args) < 3:
                return await message.answer("‚ÑπÔ∏è –§–æ—Ä–º–∞—Ç: /strategy activate <—Ç–∏–ø> <–ø–∞—Ä–∞> [–ø–∞—Ä–∞–º–µ—Ç—Ä—ã]")
            
            strategy_type = args[1].lower()
            symbol = args[2].upper()
            
            if strategy_type == "grid":
                if len(args) != 5:
                    return await message.answer("‚ÑπÔ∏è –î–ª—è grid —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ —É–∫–∞–∂–∏—Ç–µ: /strategy activate grid BTC/USDT 50000 60000")
                
                try:
                    lower = float(args[3])
                    upper = float(args[4])
                    
                    result = await auto_strategies.grid_trading(
                        user_id=message.from_user.id,
                        symbol=symbol,
                        lower=lower,
                        upper=upper
                    )
                    
                    if result['status'] == 'activated':
                        await message.answer(
                            f"‚úÖ –°–µ—Ç–æ—á–Ω–∞—è —Å—Ç—Ä–∞—Ç–µ–≥–∏—è –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞ –¥–ª—è {symbol}\n"
                            f"–î–∏–∞–ø–∞–∑–æ–Ω: {lower} - {upper} USDT\n"
                            f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Ä–¥–µ—Ä–æ–≤: {result.get('grids', 5)}"
                        )
                    else:
                        await message.answer(f"‚ö†Ô∏è –û—à–∏–±–∫–∞: {result['message']}")
                except ValueError:
                    await message.answer("‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —á–∏—Å–ª–∞ –¥–ª—è —Ü–µ–Ω")
            
            elif strategy_type == "rsi":
                if len(args) != 5:
                    return await message.answer("‚ÑπÔ∏è –î–ª—è RSI —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ —É–∫–∞–∂–∏—Ç–µ: /strategy activate rsi BTC/USDT 30 70")
                
                try:
                    oversold = int(args[3])
                    overbought = int(args[4])
                    
                    await db.execute(
                        "INSERT INTO strategies (user_id, strategy_type, symbol, params) VALUES (?, ?, ?, ?)",
                        (message.from_user.id, 'rsi', symbol, json.dumps({
                            'oversold': oversold,
                            'overbought': overbought
                        })))
                    
                    await message.answer(
                        f"‚úÖ RSI —Å—Ç—Ä–∞—Ç–µ–≥–∏—è –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞ –¥–ª—è {symbol}\n"
                        f"–£—Ä–æ–≤–Ω–∏: oversold={oversold}, overbought={overbought}"
                    )
                except ValueError:
                    await message.answer("‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ü–µ–ª—ã–µ —á–∏—Å–ª–∞ –¥–ª—è —É—Ä–æ–≤–Ω–µ–π RSI")
            
            else:
                await message.answer("‚ö†Ô∏è –ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ç–∏–ø —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏. –î–æ—Å—Ç—É–ø–Ω–æ: grid, rsi")
                
        elif subcommand == "deactivate":
            if len(args) != 2:
                return await message.answer("‚ÑπÔ∏è –§–æ—Ä–º–∞—Ç: /strategy deactivate <id>")
            
            try:
                strategy_id = int(args[1])
                await db.execute(
                    "DELETE FROM strategies WHERE user_id = ? AND strategy_id = ?",
                    (message.from_user.id, strategy_id))
                
                await message.answer(f"‚úÖ –°—Ç—Ä–∞—Ç–µ–≥–∏—è #{strategy_id} –¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞")
            except ValueError:
                await message.answer("‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω—ã–π ID —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —á–∏—Å–ª–æ")
        
        else:
            await message.answer("‚ö†Ô∏è –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –ø–æ–¥–∫–æ–º–∞–Ω–¥–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: list, activate, deactivate")
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ –∫–æ–º–∞–Ω–¥–µ strategy: {e}")
        await message.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ")

@router.message(Command("positions"))
async def cmd_positions(message: types.Message):
    """–ü—Ä–æ—Å–º–æ—Ç—Ä –æ—Ç–∫—Ä—ã—Ç—ã—Ö –ø–æ–∑–∏—Ü–∏–π"""
    try:
        positions = await position_manager.get_open_positions(message.from_user.id)
        
        if not positions:
            return await message.answer("‚ÑπÔ∏è –£ –≤–∞—Å –Ω–µ—Ç –æ—Ç–∫—Ä—ã—Ç—ã—Ö –ø–æ–∑–∏—Ü–∏–π")
        
        response = "üìä –í–∞—à–∏ –æ—Ç–∫—Ä—ã—Ç—ã–µ –ø–æ–∑–∏—Ü–∏–∏:\n\n"
        for pos in positions:
            response += (
                f"üîπ #{pos['position_id']} {pos['symbol']}\n"
                f"–¢–∏–ø: {'–õ–æ–Ω–≥' if pos['direction'] == 'long' else '–®–æ—Ä—Ç'}\n"
                f"–û–±—ä–µ–º: {pos['amount']:.4f}\n"
                f"–¶–µ–Ω–∞ –≤—Ö–æ–¥–∞: {pos['entry_price']:.2f}\n"
                f"–¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞: {pos['current_price']:.2f}\n"
                f"P&L: {pos['pnl']:.2f} USDT ({pos['pnl_percent']:.2f}%)\n\n"
            )
        
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data="refresh_positions")]
        ])
        
        await message.answer(response, reply_markup=keyboard)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–∑–∏—Ü–∏–π: {e}")
        await message.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–∑–∏—Ü–∏–π. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ")

@router.message(Command("close"))
async def cmd_close(message: types.Message):
    """–ó–∞–∫—Ä—ã—Ç–∏–µ –ø–æ–∑–∏—Ü–∏–∏"""
    try:
        args = message.text.split()
        
        if len(args) != 2:
            return await message.answer(
                "‚ÑπÔ∏è –§–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã:\n"
                "/close <id_–ø–æ–∑–∏—Ü–∏–∏>\n\n"
                "–ü—Ä–∏–º–µ—Ä:\n"
                "/close 5"
            )
        
        try:
            position_id = int(args[1])
            success = await position_manager.close_position(message.from_user.id, position_id)
            
            if success:
                await message.answer(f"‚úÖ –ü–æ–∑–∏—Ü–∏—è #{position_id} –∑–∞–∫—Ä—ã—Ç–∞")
            else:
                await message.answer(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–∫—Ä—ã—Ç—å –ø–æ–∑–∏—Ü–∏—é #{position_id}")
        except ValueError:
            await message.answer("‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω—ã–π ID –ø–æ–∑–∏—Ü–∏–∏. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —á–∏—Å–ª–æ")
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è –ø–æ–∑–∏—Ü–∏–∏: {e}")
        await message.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è –ø–æ–∑–∏—Ü–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ")

@router.message(Command("balance"))
async def cmd_balance(message: types.Message):
    """–ü—Ä–æ—Å–º–æ—Ç—Ä –±–∞–ª–∞–Ω—Å–∞ –Ω–∞ –±–∏—Ä–∂–∞—Ö"""
    try:
        user_data = await db.fetch(
            "SELECT api_keys FROM users WHERE user_id = ?",
            (message.from_user.id,))
        
        if not user_data or not user_data[0][0]:
            return await message.answer(
                "‚ÑπÔ∏è API –∫–ª—é—á–∏ –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã\n\n"
                "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /add_api –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–ª—é—á–µ–π –±–∏—Ä–∂"
            )
        
        api_keys = json.loads(user_data[0][0])
        if not api_keys:
            return await message.answer("‚ÑπÔ∏è API –∫–ª—é—á–∏ –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã")
        
        await message.answer("üîÑ –ó–∞–ø—Ä–∞—à–∏–≤–∞—é –±–∞–ª–∞–Ω—Å—ã...")
        
        balances = {}
        for exchange_name in api_keys:
            try:
                async with exchange_manager.get_exchange(exchange_name) as exchange:
                    exchange.apiKey = api_keys[exchange_name]['key']
                    exchange.secret = api_keys[exchange_name]['secret']
                    
                    balance = await exchange.fetch_balance()
                    usdt_balance = balance['total'].get('USDT', 0)
                    balances[exchange_name] = usdt_balance
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞ {exchange_name}: {e}")
                balances[exchange_name] = "–û—à–∏–±–∫–∞"
        
        response = "üí∞ –í–∞—à–∏ –±–∞–ª–∞–Ω—Å—ã:\n\n"
        for exchange, balance in balances.items():
            response += f"{exchange.upper()}: {balance if isinstance(balance, str) else f'{balance:.2f} USDT'}\n"
        
        response += "\nüîÑ –û–±–Ω–æ–≤–ª–µ–Ω–æ: " + datetime.now().strftime("%H:%M %d.%m.%Y")
        
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data="refresh_balance")]
        ])
        
        await message.answer(response, reply_markup=keyboard)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–æ–≤: {e}")
        await message.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–æ–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ")

@router.message(Command("add_api"))
async def cmd_add_api(message: types.Message):
    """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ API –∫–ª—é—á–µ–π –±–∏—Ä–∂–∏"""
    try:
        args = message.text.split()
        
        if len(args) != 4:
            return await message.answer(
                "‚ÑπÔ∏è –§–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã:\n"
                "/add_api <–±–∏—Ä–∂–∞> <api_key> <api_secret>\n\n"
                "–ü—Ä–∏–º–µ—Ä:\n"
                "/add_api binance d1a2b3c4d5 e6f7g8h9i0\n\n"
                "–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ –±–∏—Ä–∂–∏: binance, bybit, kucoin, okx"
            )
        
        exchange = args[1].lower()
        api_key = args[2]
        api_secret = args[3]
        
        if exchange not in ['binance', 'bybit', 'kucoin', 'okx']:
            return await message.answer(
                "‚ö†Ô∏è –ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º–∞—è –±–∏—Ä–∂–∞\n\n"
                "–î–æ—Å—Ç—É–ø–Ω—ã–µ: binance, bybit, kucoin, okx"
            )
        
        user_data = await db.fetch(
            "SELECT api_keys FROM users WHERE user_id = ?",
            (message.from_user.id,))
        
        current_keys = json.loads(user_data[0][0]) if user_data and user_data[0][0] else {}
        current_keys[exchange] = {
            'key': api_key,
            'secret': api_secret
        }
        
        await db.execute(
            "UPDATE users SET api_keys = ? WHERE user_id = ?",
            (json.dumps(current_keys), message.from_user.id))
        
        await message.answer(
            f"‚úÖ API –∫–ª—é—á–∏ –¥–ª—è {exchange.upper()} –¥–æ–±–∞–≤–ª–µ–Ω—ã\n\n"
            "–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏:\n"
            "‚Ä¢ –û–≥—Ä–∞–Ω–∏—á—å—Ç–µ –ø—Ä–∞–≤–∞ –∫–ª—é—á–µ–π\n"
            "‚Ä¢ –í–∫–ª—é—á–∏—Ç–µ IP-—Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—é\n"
            "‚Ä¢ –ù–∏–∫–æ–º—É –Ω–µ –ø–µ—Ä–µ–¥–∞–≤–∞–π—Ç–µ –∫–ª—é—á–∏"
        )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è API: {e}")
        await message.answer(
            "‚ö†Ô∏è –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è API –∫–ª—é—á–µ–π\n\n"
            "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ:\n"
            "1. –ü—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –≤–≤–æ–¥–∞\n"
            "2. –ü–æ–¥–¥–µ—Ä–∂–∫—É –±–∏—Ä–∂–∏\n"
            "3. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞"
        )

@router.message(Command("autotrade"))
async def cmd_autotrade(message: types.Message):
    """–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∞–≤—Ç–æ—Ç–æ—Ä–≥–æ–≤–ª–µ–π"""
    try:
        args = message.text.split()
        
        if len(args) < 2:
            user_data = await db.fetch(
                "SELECT auto_trading, trading_strategy FROM users WHERE user_id = ?",
                (message.from_user.id,))
            
            if not user_data:
                return await message.answer("‚ÑπÔ∏è –ü—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start")
            
            status = "üü¢ –í–ö–õ" if user_data[0][0] else "üî¥ –í–´–ö–õ"
            strategy = user_data[0][1] or '–Ω–µ –≤—ã–±—Ä–∞–Ω–∞'
            
            return await message.answer(
                f"ü§ñ –°—Ç–∞—Ç—É—Å –∞–≤—Ç–æ—Ç–æ—Ä–≥–æ–≤–ª–∏\n\n"
                f"–°–æ—Å—Ç–æ—è–Ω–∏–µ: {status}\n"
                f"–°—Ç—Ä–∞—Ç–µ–≥–∏—è: {strategy}\n\n"
                "–ö–æ–º–∞–Ω–¥—ã:\n"
                "/autotrade on - –í–∫–ª—é—á–∏—Ç—å\n"
                "/autotrade off - –í—ã–∫–ª—é—á–∏—Ç—å\n"
                "/autotrade strategy <–Ω–∞–∑–≤–∞–Ω–∏–µ> - –ò–∑–º–µ–Ω–∏—Ç—å —Å—Ç—Ä–∞—Ç–µ–≥–∏—é\n\n"
                "–î–æ—Å—Ç—É–ø–Ω—ã–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏:\n"
                "- arbitrage (–∞—Ä–±–∏—Ç—Ä–∞–∂)\n"
                "- trend (—Ç—Ä–µ–Ω–¥)\n"
                "- scalping (—Å–∫–∞–ª—å–ø–∏–Ω–≥)"
            )
        
        subcommand = args[1].lower()
        
        if subcommand == "on":
            await db.execute(
                "UPDATE users SET auto_trading = TRUE WHERE user_id = ?",
                (message.from_user.id,))
            await message.answer(
                "‚úÖ –ê–≤—Ç–æ—Ç–æ—Ä–≥–æ–≤–ª—è –≤–∫–ª—é—á–µ–Ω–∞\n\n"
                "–ë–æ—Ç –±—É–¥–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏:\n"
                "‚Ä¢ –ê–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Ä—ã–Ω–æ–∫\n"
                "‚Ä¢ –û—Ç–∫—Ä—ã–≤–∞—Ç—å/–∑–∞–∫—Ä—ã–≤–∞—Ç—å –ø–æ–∑–∏—Ü–∏–∏\n"
                "‚Ä¢ –£–ø—Ä–∞–≤–ª—è—Ç—å —Ä–∏—Å–∫–∞–º–∏"
            )
            
        elif subcommand == "off":
            await db.execute(
                "UPDATE users SET auto_trading = FALSE WHERE user_id = ?",
                (message.from_user.id,))
            await message.answer(
                "üõë –ê–≤—Ç–æ—Ç–æ—Ä–≥–æ–≤–ª—è –≤—ã–∫–ª—é—á–µ–Ω–∞\n\n"
                "–¢–µ–∫—É—â–∏–µ –ø–æ–∑–∏—Ü–∏–∏ –æ—Å—Ç–∞—é—Ç—Å—è –æ—Ç–∫—Ä—ã—Ç—ã–º–∏"
            )
            
        elif subcommand == "strategy" and len(args) > 2:
            strategy = args[2].lower()
            
            if strategy not in ['arbitrage', 'trend', 'scalping']:
                return await message.answer(
                    "‚ö†Ô∏è –ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º–∞—è —Å—Ç—Ä–∞—Ç–µ–≥–∏—è\n\n"
                    "–î–æ—Å—Ç—É–ø–Ω—ã–µ:\n"
                    "- arbitrage\n"
                    "- trend\n"
                    "- scalping"
                )
            
            await db.execute(
                "UPDATE users SET trading_strategy = ? WHERE user_id = ?",
                (strategy, message.from_user.id))
            
            await message.answer(f"‚úÖ –°—Ç—Ä–∞—Ç–µ–≥–∏—è –∏–∑–º–µ–Ω–µ–Ω–∞ –Ω–∞: {strategy}")
            
        else:
            await message.answer(
                "‚ö†Ô∏è –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞\n\n"
                "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ:\n"
                "/autotrade on\n"
                "/autotrade off\n"
                "/autotrade strategy <–Ω–∞–∑–≤–∞–Ω–∏–µ>"
            )
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∞–≤—Ç–æ—Ç–æ—Ä–≥–æ–≤–ª–µ–π: {e}")
        await message.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–º–∞–Ω–¥—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ")

@router.message(Command("trades"))
async def cmd_trades(message: types.Message):
    """–ò—Å—Ç–æ—Ä–∏—è —Å–¥–µ–ª–æ–∫"""
    try:
        trades = await db.fetch(
            "SELECT trade_id, symbol, amount, entry_price, exit_price, profit, status, timestamp "
            "FROM trades WHERE user_id = ? ORDER BY timestamp DESC LIMIT 10",
            (message.from_user.id,))
        
        if not trades:
            return await message.answer("‚ÑπÔ∏è –ò—Å—Ç–æ—Ä–∏—è —Å–¥–µ–ª–æ–∫ –ø—É—Å—Ç–∞")
        
        response = "üìú –ü–æ—Å–ª–µ–¥–Ω–∏–µ 10 —Å–¥–µ–ª–æ–∫:\n\n"
        for trade in trades:
            response += (
                f"üîπ #{trade[0]} {trade[1]}\n"
                f"–û–±—ä–µ–º: {trade[2]:.4f}\n"
                f"–í—Ö–æ–¥: {trade[3]:.2f}\n"
                f"–í—ã—Ö–æ–¥: {trade[4]:.2f if trade[4] else '-'}\n"
                f"–ü—Ä–∏–±—ã–ª—å: {trade[5]:.2f if trade[5] else '-'}\n"
                f"–°—Ç–∞—Ç—É—Å: {'–∑–∞–∫—Ä—ã—Ç–∞' if trade[6] == 'closed' else '–æ—Ç–∫—Ä—ã—Ç–∞'}\n"
                f"–í—Ä–µ–º—è: {trade[7][:16]}\n\n"
            )
        
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data="refresh_trades")]
        ])
        
        await message.answer(response, reply_markup=keyboard)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–¥–µ–ª–æ–∫: {e}")
        await message.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏ —Å–¥–µ–ª–æ–∫. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ")

@router.message(Command("vip"))
async def cmd_vip(message: types.Message):
    """–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ VIP —Å—Ç–∞—Ç—É—Å–µ"""
    try:
        user_data = await db.fetch(
            "SELECT vip_until FROM users WHERE user_id = ?",
            (message.from_user.id,))
        
        if not user_data:
            return await message.answer("‚ÑπÔ∏è –ü—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start")
        
        vip_until = user_data[0][0]
        is_vip = vip_until and datetime.now() < datetime.fromisoformat(vip_until)
        
        if is_vip:
            days_left = (datetime.fromisoformat(vip_until) - datetime.now()).days
            response = (
                f"üíé –í–∞—à VIP —Å—Ç–∞—Ç—É—Å –∞–∫—Ç–∏–≤–µ–Ω\n\n"
                f"–î–µ–π—Å—Ç–≤—É–µ—Ç –¥–æ: {vip_until[:10]}\n"
                f"–û—Å—Ç–∞–ª–æ—Å—å –¥–Ω–µ–π: {days_left}\n\n"
                "–ü—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞ VIP:\n"
                "‚Ä¢ –ù–µ–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω—ã–µ —Å–∏–≥–Ω–∞–ª—ã\n"
                "‚Ä¢ –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω—ã–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏\n"
                "‚Ä¢ –ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞"
            )
        else:
            response = (
                "üîí –£ –≤–∞—Å –Ω–µ—Ç VIP –ø–æ–¥–ø–∏—Å–∫–∏\n\n"
                f"–°—Ç–æ–∏–º–æ—Å—Ç—å: {Config.VIP_PRICE} USDT/–º–µ—Å—è—Ü\n\n"
                "–ü—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞:\n"
                "‚Ä¢ –ù–µ–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω—ã–µ —Å–∏–≥–Ω–∞–ª—ã\n"
                "‚Ä¢ –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω—ã–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏\n"
                "‚Ä¢ –ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞\n\n"
                "–î–ª—è –æ–ø–ª–∞—Ç—ã –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /pay_vip"
            )
        
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üí≥ –û–ø–ª–∞—Ç–∏—Ç—å VIP", callback_data="pay_vip")]
        ]) if not is_vip else None
        
        await message.answer(response, reply_markup=keyboard)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ VIP: {e}")
        await message.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ")

@router.message(Command("pay_vip"))
async def cmd_pay_vip(message: types.Message):
    """–û–ø–ª–∞—Ç–∞ VIP –ø–æ–¥–ø–∏—Å–∫–∏"""
    try:
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üí≥ –û–ø–ª–∞—Ç–∏—Ç—å 1 –º–µ—Å—è—Ü", callback_data="vip_1_month")],
            [InlineKeyboardButton(text="üíé –û–ø–ª–∞—Ç–∏—Ç—å 3 –º–µ—Å—è—Ü–∞ (-15%)", callback_data="vip_3_months")],
            [InlineKeyboardButton(text="üëë –û–ø–ª–∞—Ç–∏—Ç—å 12 –º–µ—Å—è—Ü–µ–≤ (-30%)", callback_data="vip_12_months")]
        ])
        
        await message.answer(
            f"üíé VIP –ø–æ–¥–ø–∏—Å–∫–∞\n\n"
            f"1 –º–µ—Å—è—Ü: {Config.VIP_PRICE} USDT\n"
            f"3 –º–µ—Å—è—Ü–∞: {Config.VIP_PRICE * 3 * 0.85:.2f} USDT (-15%)\n"
            f"12 –º–µ—Å—è—Ü–µ–≤: {Config.VIP_PRICE * 12 * 0.7:.2f} USDT (-30%)\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—Ä–∏–∞–Ω—Ç –æ–ø–ª–∞—Ç—ã:",
            reply_markup=keyboard
        )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–ø–ª–∞—Ç—ã VIP: {e}")
        await message.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è –æ–ø–ª–∞—Ç—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ")


# ==================== CALLBACK –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò ====================

@router.callback_query(F.data == "refresh_menu")
async def callback_refresh_menu(callback: types.CallbackQuery):
    """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é"""
    try:
        await callback.answer("–ú–µ–Ω—é –æ–±–Ω–æ–≤–ª–µ–Ω–æ")
        await cmd_start(callback.message)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –º–µ–Ω—é: {e}")
        await callback.message.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è")

@router.callback_query(F.data.startswith("del_strat_"))
async def callback_delete_strategy(callback: types.CallbackQuery):
    """–£–¥–∞–ª–µ–Ω–∏–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏"""
    try:
        strat_id = int(callback.data.split("_")[2])
        await db.execute(
            "DELETE FROM strategies WHERE user_id = ? AND strategy_id = ?",
            (callback.from_user.id, strat_id))
        
        await callback.answer(f"–°—Ç—Ä–∞—Ç–µ–≥–∏—è #{strat_id} —É–¥–∞–ª–µ–Ω–∞")
        await callback.message.edit_text(
            text=f"‚úÖ –°—Ç—Ä–∞—Ç–µ–≥–∏—è #{strat_id} —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞",
            reply_markup=None
        )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏: {e}")
        await callback.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è")

@router.callback_query(F.data == "buy_vip")
async def callback_buy_vip(callback: types.CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ –ø–æ–∫—É–ø–∫–∏ VIP"""
    try:
        await callback.answer()
        await cmd_pay_vip(callback.message)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ callback buy_vip: {e}")
        await callback.message.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–ø—Ä–æ—Å–∞")

@router.callback_query(F.data.startswith("vip_"))
async def callback_pay_vip(callback: types.CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ VIP –ø–æ–¥–ø–∏—Å–∫–∏"""
    try:
        await callback.answer()
        
        plan = callback.data.split('_')[1]
        months = int(plan.split('_')[0])
        
        price = Config.VIP_PRICE * months
        if months == 3:
            price *= 0.85
        elif months == 12:
            price *= 0.7
        
        # –ó–¥–µ—Å—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ª–æ–≥–∏–∫–∞ –æ–ø–ª–∞—Ç—ã (–Ω–∞–ø—Ä–∏–º–µ—Ä, –≥–µ–Ω–µ—Ä–∞—Ü–∏—è —Å—á–µ—Ç–∞)
        # –î–ª—è –ø—Ä–∏–º–µ—Ä–∞ –ø—Ä–æ—Å—Ç–æ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–¥–ø–∏—Å–∫—É
        vip_until = (datetime.now() + timedelta(days=30*months)).isoformat()
        await db.execute(
            "UPDATE users SET vip_until = ? WHERE user_id = ?",
            (vip_until, callback.from_user.id))
        
        await callback.message.answer(
            f"‚úÖ VIP –ø–æ–¥–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞ –Ω–∞ {months} –º–µ—Å—è—Ü–µ–≤\n\n"
            f"–î–µ–π—Å—Ç–≤—É–µ—Ç –¥–æ: {vip_until[:10]}\n"
            "–¢–µ–ø–µ—Ä—å –≤–∞–º –¥–æ—Å—Ç—É–ø–Ω—ã –≤—Å–µ VIP —Ñ—É–Ω–∫—Ü–∏–∏!"
        )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ callback pay_vip: {e}")
        await callback.message.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –ø–æ–¥–ø–∏—Å–∫–∏")

@router.callback_query(F.data == "refresh_positions")
async def callback_refresh_positions(callback: types.CallbackQuery):
    """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –ø–æ–∑–∏—Ü–∏–π"""
    try:
        await callback.answer("–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ...")
        await cmd_positions(callback.message)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–æ–∑–∏—Ü–∏–π: {e}")
        await callback.message.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è")

@router.callback_query(F.data == "refresh_balance")
async def callback_refresh_balance(callback: types.CallbackQuery):
    """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–æ–≤"""
    try:
        await callback.answer("–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ...")
        await cmd_balance(callback.message)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–æ–≤: {e}")
        await callback.message.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è")

@router.callback_query(F.data == "refresh_trades")
async def callback_refresh_trades(callback: types.CallbackQuery):
    """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏ —Å–¥–µ–ª–æ–∫"""
    try:
        await callback.answer("–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ...")
        await cmd_trades(callback.message)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–¥–µ–ª–æ–∫: {e}")
        await callback.message.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è")

@router.callback_query(F.data == "market_analysis")
async def callback_market_analysis(callback: types.CallbackQuery):
    """–ê–Ω–∞–ª–∏–∑ —Ä—ã–Ω–∫–∞"""
    try:
        await callback.answer()
        await message.answer(
            "üìà –¢–µ–∫—É—â–∞—è —Ä—ã–Ω–æ—á–Ω–∞—è —Å–∏—Ç—É–∞—Ü–∏—è:\n\n"
            "BTC/USDT: +2.3% –∑–∞ —Å—É—Ç–∫–∏\n"
            "ETH/USDT: +1.1% –∑–∞ —Å—É—Ç–∫–∏\n"
            "–û–±—â–∏–π –æ–±—ä–µ–º: $42.5B\n\n"
            "–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è: –Ω–µ–π—Ç—Ä–∞–ª—å–Ω—ã–π —Ä—ã–Ω–æ–∫"
        )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ —Ä—ã–Ω–∫–∞: {e}")
        await callback.message.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞")

@router.callback_query(F.data == "leaderboard")
async def callback_leaderboard(callback: types.CallbackQuery):
    """–¢–æ–ø –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ –ø—Ä–∏–±—ã–ª–∏"""
    try:
        await callback.answer()
        top_users = await db.fetch(
            "SELECT user_id, total_profit FROM users ORDER BY total_profit DESC LIMIT 10"
        )
        response = "üèÜ –¢–æ–ø –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:\n\n"
        for i, (user_id, profit) in enumerate(top_users, 1):
            user = await callback.message.bot.get_chat(user_id)
            name = user.full_name if user else f"ID {user_id}"
            response += f"{i}. {name}: {profit:.2f} USDT\n"
        
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data="leaderboard")]
        ])
        
        await callback.message.answer(response, reply_markup=keyboard)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ leaderboard: {e}")
        await callback.message.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ç–æ–ø–∞")

@router.callback_query(F.data == "settings")
async def callback_settings(callback: types.CallbackQuery):
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    try:
        await callback.answer()
        user_data = await db.fetch(
            "SELECT risk_level, auto_trading, trading_strategy FROM users WHERE user_id = ?",
            (callback.from_user.id,)
        )
        
        if not user_data:
            return await callback.message.answer("‚ÑπÔ∏è –ü—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start")
        
        risk_level = user_data[0][0]
        auto_trading = "üü¢ –í–ö–õ" if user_data[0][1] else "üî¥ –í–´–ö–õ"
        strategy = user_data[0][2] or "–Ω–µ –≤—ã–±—Ä–∞–Ω–∞"
        
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [
                InlineKeyboardButton(text="üìâ –£—Ä–æ–≤–µ–Ω—å —Ä–∏—Å–∫–∞", callback_data="set_risk"),
                InlineKeyboardButton(text="ü§ñ –ê–≤—Ç–æ—Ç–æ—Ä–≥–æ–≤–ª—è", callback_data="toggle_auto")
            ],
            [
                InlineKeyboardButton(text="üìà –°—Ç—Ä–∞—Ç–µ–≥–∏—è", callback_data="set_strategy"),
                InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="menu")
            ]
        ])
        
        await callback.message.answer(
            f"‚öôÔ∏è –í–∞—à–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:\n\n"
            f"‚Ä¢ –£—Ä–æ–≤–µ–Ω—å —Ä–∏—Å–∫–∞: {risk_level}/5\n"
            f"‚Ä¢ –ê–≤—Ç–æ—Ç–æ—Ä–≥–æ–≤–ª—è: {auto_trading}\n"
            f"‚Ä¢ –°—Ç—Ä–∞—Ç–µ–≥–∏—è: {strategy}\n\n"
            "–ò–∑–º–µ–Ω–∏—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã:",
            reply_markup=keyboard
        )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫: {e}")
        await callback.message.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫")

@router.callback_query(F.data == "my_positions")
async def callback_my_positions(callback: types.CallbackQuery):
    """–ú–æ–∏ –ø–æ–∑–∏—Ü–∏–∏ (–∞–Ω–∞–ª–æ–≥–∏—á–Ω–æ /positions)"""
    try:
        await callback.answer()
        await cmd_positions(callback.message)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–∑–∏—Ü–∏–π: {e}")
        await callback.message.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø–æ–∑–∏—Ü–∏–π")

@router.callback_query(F.data == "auto_trading")
async def callback_auto_trading(callback: types.CallbackQuery):
    """–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∞–≤—Ç–æ—Ç–æ—Ä–≥–æ–≤–ª–µ–π (–∞–Ω–∞–ª–æ–≥–∏—á–Ω–æ /autotrade)"""
    try:
        await callback.answer()
        await cmd_autotrade(callback.message)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ç–æ—Ä–≥–æ–≤–ª–∏: {e}")
        await callback.message.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫")

@router.callback_query(F.data == "ai_analysis")
async def callback_ai_analysis(callback: types.CallbackQuery):
    """AI –∞–Ω–∞–ª–∏–∑ (–∞–Ω–∞–ª–æ–≥–∏—á–Ω–æ /ai_scan)"""
    try:
        await callback.answer()
        await callback.message.answer(
            "üîç –í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä—É –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞, –Ω–∞–ø—Ä–∏–º–µ—Ä:\n"
            "<code>BTC/USDT</code>\n\n"
            "–î–æ—Å—Ç—É–ø–Ω—ã–µ –ø–∞—Ä—ã: " + ", ".join(Config.TRADING_PAIRS[:5]) + "..."
        )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ AI –∞–Ω–∞–ª–∏–∑–∞: {e}")
        await callback.message.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –∞–Ω–∞–ª–∏–∑–∞")

# –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–µ–∫
@router.callback_query(F.data == "toggle_auto")
async def callback_toggle_auto(callback: types.CallbackQuery):
    """–ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –∞–≤—Ç–æ—Ç–æ—Ä–≥–æ–≤–ª–∏"""
    try:
        await callback.answer()
        user_data = await db.fetch(
            "SELECT auto_trading FROM users WHERE user_id = ?",
            (callback.from_user.id,))
        
        new_status = not user_data[0][0]
        await db.execute(
            "UPDATE users SET auto_trading = ? WHERE user_id = ?",
            (new_status, callback.from_user.id))
        
        status = "üü¢ –í–ö–õ–Æ–ß–ï–ù–ê" if new_status else "üî¥ –í–´–ö–õ–Æ–ß–ï–ù–ê"
        await callback.message.answer(f"–ê–≤—Ç–æ—Ç–æ—Ä–≥–æ–≤–ª—è: {status}")
        await callback_settings(callback)  # –û–±–Ω–æ–≤–ª—è–µ–º –º–µ–Ω—é
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è –∞–≤—Ç–æ—Ç–æ—Ä–≥–æ–≤–ª–∏: {e}")
        await callback.message.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫")

@router.callback_query(F.data == "set_risk")
async def callback_set_risk(callback: types.CallbackQuery):
    """–ò–∑–º–µ–Ω–µ–Ω–∏–µ —É—Ä–æ–≤–Ω—è —Ä–∏—Å–∫–∞"""
    try:
        await callback.answer()
        keyboard = InlineKeyboardMarkup(row_width=5)
        buttons = [
            InlineKeyboardButton(text=str(i), callback_data=f"risk_{i}") 
            for i in range(1, 6)
        ]
        keyboard.add(*buttons)
        await callback.message.answer("üìâ –í—ã–±–µ—Ä–∏—Ç–µ —É—Ä–æ–≤–µ–Ω—å —Ä–∏—Å–∫–∞ (1-5):", reply_markup=keyboard)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤—ã–±–æ—Ä–∞ —Ä–∏—Å–∫–∞: {e}")
        await callback.message.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Ä–∏—Å–∫–∞")

@router.callback_query(F.data.startswith("risk_"))
async def callback_save_risk(callback: types.CallbackQuery):
    """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —É—Ä–æ–≤–Ω—è —Ä–∏—Å–∫–∞"""
    try:
        risk_level = int(callback.data.split("_")[1])
        await db.execute(
            "UPDATE users SET risk_level = ? WHERE user_id = ?",
            (risk_level, callback.from_user.id))
        
        await callback.answer(f"–£—Ä–æ–≤–µ–Ω—å —Ä–∏—Å–∫–∞: {risk_level}")
        await callback_settings(callback)  # –í–æ–∑–≤—Ä–∞—Ç –≤ –º–µ–Ω—é
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ä–∏—Å–∫–∞: {e}")
        await callback.message.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è")

# ==================== –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –û–®–ò–ë–û–ö ====================

@router.errors()
async def errors_handler(update: types.Update, exception: Exception):
    """–ì–ª–æ–±–∞–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫"""
    logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ update {update}: {exception}")
    
    if isinstance(update, types.Message) and update.from_user:
        try:
            await update.answer(
                "‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–ø—Ä–æ—Å–∞\n"
                "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É"
            )
        except:
            pass
    
    return True
